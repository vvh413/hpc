// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2021 18:19:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          nn
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module nn_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [14:0] Scurr;
reg [14:0] W;
reg clk;
reg en;
reg rst_n;
// wires                                               
wire [4:0] Snext;
wire [4:0] act;
wire done;
wire done_n1z;

// assign statements (if any)                          
nn i1 (
// port map - connection between master ports and signals/registers   
	.Scurr(Scurr),
	.Snext(Snext),
	.W(W),
	.act(act),
	.clk(clk),
	.done(done),
	.done_n1z(done_n1z),
	.en(en),
	.rst_n(rst_n)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// en
initial
begin
	en = 1'b1;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
end 
// Scurr[ 14 ]
initial
begin
	Scurr[14] = 1'b0;
	Scurr[14] = #210000 1'b1;
	Scurr[14] = #480000 1'b0;
end 
// Scurr[ 13 ]
initial
begin
	Scurr[13] = 1'b0;
	Scurr[13] = #210000 1'b1;
	Scurr[13] = #480000 1'b0;
end 
// Scurr[ 12 ]
initial
begin
	Scurr[12] = 1'b0;
	Scurr[12] = #210000 1'b1;
	Scurr[12] = #480000 1'b0;
end 
// Scurr[ 11 ]
initial
begin
	Scurr[11] = 1'b0;
	Scurr[11] = #210000 1'b1;
	Scurr[11] = #480000 1'b0;
end 
// Scurr[ 10 ]
initial
begin
	Scurr[10] = 1'b1;
end 
// Scurr[ 9 ]
initial
begin
	Scurr[9] = 1'b1;
	Scurr[9] = #210000 1'b0;
	Scurr[9] = #250000 1'b1;
	Scurr[9] = #230000 1'b0;
end 
// Scurr[ 8 ]
initial
begin
	Scurr[8] = 1'b1;
	Scurr[8] = #210000 1'b0;
	Scurr[8] = #250000 1'b1;
	Scurr[8] = #230000 1'b0;
end 
// Scurr[ 7 ]
initial
begin
	Scurr[7] = 1'b1;
	Scurr[7] = #210000 1'b0;
	Scurr[7] = #250000 1'b1;
	Scurr[7] = #230000 1'b0;
end 
// Scurr[ 6 ]
initial
begin
	Scurr[6] = 1'b1;
	Scurr[6] = #210000 1'b0;
	Scurr[6] = #250000 1'b1;
	Scurr[6] = #230000 1'b0;
end 
// Scurr[ 5 ]
initial
begin
	Scurr[5] = 1'b1;
end 
// Scurr[ 4 ]
initial
begin
	Scurr[4] = 1'b0;
end 
// Scurr[ 3 ]
initial
begin
	Scurr[3] = 1'b0;
end 
// Scurr[ 2 ]
initial
begin
	Scurr[2] = 1'b0;
end 
// Scurr[ 1 ]
initial
begin
	Scurr[1] = 1'b0;
end 
// Scurr[ 0 ]
initial
begin
	Scurr[0] = 1'b1;
end 
// W[ 14 ]
initial
begin
	W[14] = 1'b0;
end 
// W[ 13 ]
initial
begin
	W[13] = 1'b0;
end 
// W[ 12 ]
initial
begin
	W[12] = 1'b0;
end 
// W[ 11 ]
initial
begin
	W[11] = 1'b0;
end 
// W[ 10 ]
initial
begin
	W[10] = 1'b1;
end 
// W[ 9 ]
initial
begin
	W[9] = 1'b1;
end 
// W[ 8 ]
initial
begin
	W[8] = 1'b1;
end 
// W[ 7 ]
initial
begin
	W[7] = 1'b1;
end 
// W[ 6 ]
initial
begin
	W[6] = 1'b1;
end 
// W[ 5 ]
initial
begin
	W[5] = 1'b1;
end 
// W[ 4 ]
initial
begin
	W[4] = 1'b0;
end 
// W[ 3 ]
initial
begin
	W[3] = 1'b0;
end 
// W[ 2 ]
initial
begin
	W[2] = 1'b0;
end 
// W[ 1 ]
initial
begin
	W[1] = 1'b0;
end 
// W[ 0 ]
initial
begin
	W[0] = 1'b1;
end 
endmodule

